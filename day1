객체지향이란?
- 프로그래밍에서 필요한 데이터를 추상화시켜 속성과 행위를 가진 객체로 만들고, 그 객체간 상호작용을 통해서 로직을 구성하는 프로그래밍 방식

객체지향 프로그래밍의 장점
- 재사용성 - 남이 만든 클래스를 가지고와서 이용할수있고 상속을통해서 확장에 용이하기 때문
- 유지보수성 - 수정이 필요한 부분이 클래스 내부의 멤버 변수 또는 메서드로 존재하기 때문에 해당 부분만 수정시켜주면 됨

객체지향 설계 원칙(SOLID)
- 단일 책임 원칙 (Single Responsiblity Principle)
모든 클래스는 각각 하나의 책임만 가져야 한다. 클래스는 그 책임을 완전히 캡슐화해야 함을 말한다.
사칙연산 함수를 가지고 있는 계산 클래스가 있다고 치자. 이 상태의 계산 클래스는 오직 사칙연산 기능만을 책임진다. 이 클래스를 수정한다고 한다면 그 이유는 사직연산 함수와 관련된 문제일 뿐이다.
- 개방-폐쇄 원칙 (Open Closed Principle)
확장에는 열려있고 수정에는 닫혀있는. 기존의 코드를 변경하지 않으면서( Closed), 기능을 추가할 수 있도록(Open) 설계가 되어야 한다는 원칙을 말한다.
캐릭터를 하나 생성한다고 할때, 각각의 캐릭터가 움직임이 다를 경우 움직임의 패턴 구현을 하위 클래스에 맡긴다면 캐릭터 클래스의 수정은 필요가없고(Closed) 움직임의 패턴만 재정의 하면 된다.(Open)
- 리스코프 치환 원칙 (Liskov Substitution Principle)
자식 클래스는 언제나 자신의 부모 클래스를 대체할 수 있다는 원칙이다. 즉 부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 계획대로 잘 작동해야 한다.
자식클래스는 부모 클래스의 책임을 무시하거나 재정의하지 않고 확장만 수행하도록 해야 LSP를 만족한다.
- 인터페이스 분리 원칙 (Interface Segregation Principle)
한 클래스는 자신이 사용하지않는 인터페이스는 구현하지 말아야 한다. 하나의 일반적인 인터페이스보다 여러개의 구체적인 인터페이스가 낫다.
- 의존 역전 원칙 (Dependency Inversion Principle)
의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 것이다. 한마디로 구체적인 클래스보다 인터페이스나 추상 클래스와 관계를 맺으라는 것이다.

객체지향 특징
- 추상화 > 필요한 정보만을 중심으로 간소화하는것 
- 캡슐화 > 추상화를 진행한 객체에 필요한 정보나 메서드(기능)를 그룹화시켜주는것 
- 상속성 > 상위클래스의 기능을 하위클래스에서 사용할 수 있는 개념 -> 중복되는 코드의 재사용성을 위함. 
- 다형성 > 다형성을 활용하면 기능을 확장하거나, 객체를 변경해야할 때 타입 변경 없이 객체 주입만으로 수정이 일어나게 할 수 있음.

어떤 코드가 클린코드인지
- 불필요한 테스트코드가 없고, 3자의 입장에서 보았을때 이해하기 무리가 안가는 코드, 실제로는 여러명이서 작업했지만 한사람이 작성한듯한 코드
 -> 불필요 테스트코드(dead code) : 계산되고자 하는 시간과 메모리의 낭비 때문에 여러 버그들을 일크니는 문제가 될 수 있는 코드. 결과적으로 사용할 수 없는 코드.
 
 RESTful 이란
 - HTTP와 URI기반으로 자원에 접근할 수 있도록 제공하는 개발 인터페이스.
-> RESTful은 자기 서술적이어야함. URI와 HTTP만 보고도 이것이 어떤 행위를 위한 API이인지 알아야한다는 것.
